import { useState, useEffect } from 'react';
import { Layout } from '@/components/Layout';
import { ContentGeneration } from '@/components/ContentGeneration';
import { StrategicCalendar } from '@/components/StrategicCalendar';
import { ContentReview } from '@/components/ContentReview';
import { Auth } from '@/components/Auth';
import { Content } from '@/types';
import { Toaster } from '@/components/ui/sonner';
import { DatabaseService } from '@/services/databaseService';
import { supabase } from '@/config/supabase';

function App() {
  const [currentView, setCurrentView] = useState<'generation' | 'calendar' | 'review'>('generation');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [contents, setContents] = useState<Content[]>([]);

  // Temporariamente mostrar todos os conte√∫dos para debug
  const approvedContent = contents; // Removendo filtro temporariamente
  
  // Filtrar conte√∫dos aprovados e agendados (conte√∫dos que podem ser gerenciados no calend√°rio)
  // const approvedContent = contents.filter(content => 
  //   content.status === 'approved' || 
  //   content.status === 'scheduled' || 
  //   content.status === 'generated' || 
  //   content.status === 'draft'
  // );
  
  // Debug: verificar conte√∫dos
  // console.log('App.tsx - Total de conte√∫dos:', contents.length);
  // console.log('App.tsx - Conte√∫dos aprovados:', approvedContent.length);
  // console.log('App.tsx - Status dos conte√∫dos:', contents.map((c: Content) => ({ id: c.id, title: c.title, status: c.status })));
  // console.log('App.tsx - Todos os conte√∫dos:', contents);

  // Verificar autentica√ß√£o e carregar conte√∫dos na inicializa√ß√£o
  useEffect(() => {
    console.log('App.tsx - useEffect executado, inicializando app...');
    
    const initializeApp = async () => {
      try {
        console.log('App.tsx - Verificando sess√£o inicial...');
        // Verificar se h√° uma sess√£o ativa
        const { data: { session } } = await supabase.auth.getSession();
        console.log('Sess√£o inicial:', session);
        
        if (session) {
          setIsAuthenticated(true);
          console.log('Usu√°rio j√° autenticado:', session.user.email);
        }

        // Carregar conte√∫dos se autenticado
        if (session) {
          console.log('App.tsx - Carregando conte√∫dos...');
          // Aguardar um pouco para garantir que a conex√£o est√° pronta
          await new Promise(resolve => setTimeout(resolve, 1000));
          const result = await DatabaseService.getContents();
          console.log('App.tsx - Resultado do getContents:', result);
          if (result.data) {
            setContents(result.data);
            console.log('App.tsx - Conte√∫dos definidos no estado:', result.data.length);
          }
        }
      } catch (error) {
        console.error('Erro ao inicializar app:', error);
      } finally {
        console.log('App.tsx - Finalizando inicializa√ß√£o, definindo isLoading = false');
        setIsLoading(false);
      }
    };

    console.log('App.tsx - Chamando initializeApp...');
    initializeApp();

    // Escutar mudan√ßas de autentica√ß√£o
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log('Mudan√ßa de autentica√ß√£o:', event, session?.user?.email);
        
        if (event === 'SIGNED_IN' && session) {
          setIsAuthenticated(true);
          console.log('Usu√°rio fez login:', session.user.email);
          
          // Carregar conte√∫dos ap√≥s login
          try {
            console.log('App.tsx - Carregando conte√∫dos ap√≥s login...');
            // Aguardar um pouco para garantir que a conex√£o est√° pronta
            await new Promise(resolve => setTimeout(resolve, 1000));
            const result = await DatabaseService.getContents();
            console.log('App.tsx - Resultado do getContents ap√≥s login:', result);
            if (result.data) {
              setContents(result.data);
              console.log('App.tsx - Conte√∫dos definidos ap√≥s login:', result.data.length);
            } else {
              console.log('App.tsx - Nenhum conte√∫do retornado ap√≥s login');
            }
          } catch (error) {
            console.error('Erro ao carregar conte√∫dos ap√≥s login:', error);
          }
        } else if (event === 'SIGNED_OUT') {
          setIsAuthenticated(false);
          setContents([]);
          console.log('Usu√°rio fez logout');
        }
      }
    );

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  // Debug: verificar mudan√ßas no estado contents
  useEffect(() => {
    console.log('App.tsx - Estado contents atualizado:', contents.length, 'conte√∫dos');
    if (contents.length > 0) {
      console.log('App.tsx - Detalhes dos conte√∫dos:', contents.map(c => ({ id: c.id, title: c.title, status: c.status })));
    }
  }, [contents]);

  // Reagir √†s mudan√ßas no estado de autentica√ß√£o
  useEffect(() => {
    if (isAuthenticated) {
      console.log('Usu√°rio autenticado, redirecionando para dashboard');
      setCurrentView('generation');
    }
  }, [isAuthenticated]);

  const createContent = async (content: Omit<Content, 'id' | 'createdAt'>) => {
    try {
      const result = await DatabaseService.createContent(content);
      if (result.data) {
        setContents(prev => [result.data!, ...prev]);
        return { success: true, data: result.data };
      }
      return { success: false, error: result.error };
    } catch (error) {
      console.error('Erro ao criar conte√∫do:', error);
      return { success: false, error };
    }
  };

  const updateContent = async (id: string, updates: Partial<Content>) => {
    try {
      const result = await DatabaseService.updateContent(id, updates);
      if (result.data) {
        setContents(prev => prev.map(content => 
          content.id === id ? result.data! : content
        ));
        return { success: true, data: result.data };
      }
      return { success: false, error: result.error };
    } catch (error) {
      console.error('Erro ao atualizar conte√∫do:', error);
      return { success: false, error };
    }
  };

  const createScheduledPost = async (post: any) => {
    try {
      // Implementar cria√ß√£o de post agendado se necess√°rio
      console.log('Criando post agendado:', post);
      return { success: true };
    } catch (error) {
      console.error('Erro ao criar post agendado:', error);
      return { success: false, error };
    }
  };

  const signOut = async () => {
    try {
      await supabase.auth.signOut();
      // O listener onAuthStateChange vai lidar com a limpeza do estado
    } catch (error) {
      console.error('Erro ao fazer logout:', error);
    }
  };

  // Fun√ß√£o para criar conte√∫dos de teste
  const createTestContent = async () => {
    try {
      const testContents = [
        {
          title: 'Descubra o Poder das Laranjas!',
          content: 'üì± **CARROSSEL - 2 SLIDES**\n\n**Slide 1:** As laranjas s√£o um superalimento rico em vitamina C! üçä\n\n**Slide 2:** Inclua laranjas na sua dieta di√°ria para fortalecer a imunidade e ter mais energia! üí™\n\n#laranjas #vitaminaC #saude #alimentacao #imunidade',
          platform: 'instagram' as const,
          format: 'carousel' as const,
          status: 'approved' as const,
          agentId: null,
          prompt: 'Criar conte√∫do sobre benef√≠cios das laranjas'
        },
        {
          title: 'Receita de Suco Detox',
          content: 'ü•§ **RECEITA DE SUC DETOX**\n\nIngredientes:\n‚Ä¢ 2 laranjas\n‚Ä¢ 1 lim√£o\n‚Ä¢ 1 peda√ßo de gengibre\n‚Ä¢ 200ml de √°gua\n‚Ä¢ Folhas de hortel√£\n\nModo de preparo:\n1. Esprema as laranjas e o lim√£o\n2. Rale o gengibre\n3. Misture tudo com √°gua\n4. Adicione hortel√£\n5. Sirva gelado\n\n#detox #suco #saude #receita #laranja',
          platform: 'instagram' as const,
          format: 'video_script' as const,
          status: 'generated' as const,
          agentId: null,
          prompt: 'Criar receita de suco detox com laranja'
        },
        {
          title: 'Newsletter: Benef√≠cios da Vitamina C',
          content: '**Newsletter Semanal - Benef√≠cios da Vitamina C**\n\nOl√°!\n\nEsta semana vamos falar sobre os incr√≠veis benef√≠cios da vitamina C, encontrada em abund√¢ncia nas laranjas.\n\n**Principais benef√≠cios:**\n‚Ä¢ Fortalece o sistema imunol√≥gico\n‚Ä¢ Ajuda na absor√ß√£o de ferro\n‚Ä¢ √â um poderoso antioxidante\n‚Ä¢ Contribui para a sa√∫de da pele\n\n**Dica da semana:**\nConsuma pelo menos uma laranja por dia para manter seus n√≠veis de vitamina C adequados.\n\nAt√© a pr√≥xima semana!\n\nEquipe GoFlow',
          platform: 'email' as const,
          format: 'email_newsletter' as const,
          status: 'draft' as const,
          agentId: null,
          prompt: 'Criar newsletter sobre vitamina C'
        }
      ];

      for (const content of testContents) {
        const result = await createContent(content);
        if (result.success) {
          console.log('Conte√∫do de teste criado:', content.title);
        } else {
          console.error('Erro ao criar conte√∫do de teste:', content.title, result.error);
        }
      }

      // Recarregar conte√∫dos
      const result = await DatabaseService.getContents();
      if (result.data) {
        setContents(result.data);
      }
    } catch (error) {
      console.error('Erro ao criar conte√∫dos de teste:', error);
    }
  };

  const handleContentApproved = async (content: Content) => {
    try {
      const result = await createContent(content);
      if (result.success && result.data) {
        // Salvar imagens do carrossel se existirem
        if (content.carouselImages && content.carouselImages.length > 0) {
          console.log('Salvando imagens do carrossel:', content.carouselImages.length);
          
          for (const image of content.carouselImages) {
            try {
              await DatabaseService.createCarouselImage({
                content_id: result.data.id,
                slide_number: image.slideNumber,
                image_url: image.imageUrl || null,
                description: image.description || null,
                status: image.status
              });
              console.log(`Imagem do slide ${image.slideNumber} salva com sucesso`);
            } catch (imageError) {
              console.error(`Erro ao salvar imagem do slide ${image.slideNumber}:`, imageError);
            }
          }
        }
        
        // Opcionalmente, mudar para a view do calend√°rio ap√≥s aprova√ß√£o
        setCurrentView('calendar');
      }
    } catch (error) {
      console.error('Erro ao salvar conte√∫do aprovado:', error);
    }
  };

  const handleScheduleContent = async (contentId: string, date: Date) => {
    try {
      // Atualizar o conte√∫do para status 'scheduled'
      await updateContent(contentId, { 
        status: 'scheduled', 
        scheduledFor: date 
      });

      // Criar post agendado
      const content = contents.find((c: Content) => c.id === contentId);
      if (content) {
        await createScheduledPost({
          contentId: content.id,
          platform: content.platform,
          scheduledFor: date,
          status: 'scheduled',
          createdAt: new Date()
        });
      }
    } catch (error) {
      console.error('Erro ao agendar conte√∫do:', error);
    }
  };

  const handleUnscheduleContent = async (contentId: string) => {
    try {
      // Atualizar o conte√∫do para status 'approved' (removendo o agendamento)
      await updateContent(contentId, { 
        status: 'approved', 
        scheduledFor: undefined 
      });
    } catch (error) {
      console.error('Erro ao desagendar conte√∫do:', error);
    }
  };

  const handleUpdateContent = async (contentId: string, updates: Partial<Content>) => {
    try {
      await updateContent(contentId, updates);
      // Os conte√∫dos j√° s√£o atualizados automaticamente no estado pela fun√ß√£o updateContent
    } catch (error) {
      console.error('Erro ao atualizar conte√∫do:', error);
      throw error; // Re-throw para que o componente possa lidar com o erro
    }
  };

  // Mostrar tela de carregamento
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4"></div>
          <p className="text-muted-foreground">Carregando...</p>
        </div>
      </div>
    );
  }

  // Debug: verificar estado de autentica√ß√£o
  console.log('App.tsx - isAuthenticated:', isAuthenticated, 'isLoading:', isLoading);

  // Mostrar tela de autentica√ß√£o se n√£o estiver logado
  if (!isAuthenticated) {
    return <Auth onAuthSuccess={() => {
      console.log('onAuthSuccess chamado');
      // N√£o precisamos fazer nada aqui, o useEffect vai reagir √† mudan√ßa de isAuthenticated
    }} />;
  }

  const renderCurrentView = () => {
    switch (currentView) {
      case 'generation':
        return (
          <ContentGeneration 
            onContentApproved={handleContentApproved}
          />
        );
      case 'calendar':
        return (
          <StrategicCalendar 
            approvedContent={approvedContent}
            allContents={contents}
            onScheduleContent={handleScheduleContent}
            onUnscheduleContent={handleUnscheduleContent}
            onUpdateContent={handleUpdateContent}
            onCreateTestContent={createTestContent}
          />
        );
      case 'review':
        return (
          <ContentReview 
            approvedContent={approvedContent}
          />
        );
      default:
        return (
          <ContentGeneration 
            onContentApproved={handleContentApproved}
          />
        );
    }
  };

  return (
    <>
      <Layout 
        currentView={currentView} 
        onViewChange={setCurrentView}
        onSignOut={signOut}
      >
        {renderCurrentView()}
      </Layout>
      <Toaster />
    </>
  );
}

export default App;
